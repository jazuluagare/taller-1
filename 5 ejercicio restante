{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Ejercicio 10\n",
    "\n",
    "c= input('introdusca una cadena: ')\n",
    "c1=''\n",
    "for n in range((len(c))):\n",
    "    v=ord(c[n]) #cada letra toma su numero de python\n",
    "    if v>=97 and v<=122:# son los ord de a a z en minuscula\n",
    "        v=v-32 #las mayusculas estan 32 puestos antes que las minusculas\n",
    "    elif v==255: #á\n",
    "        v=193 #Á\n",
    "    elif v==237: #í\n",
    "        v=205 #Í\n",
    "    elif v==243: #ó\n",
    "        v=211 #Ó\n",
    "    elif v==233: #é\n",
    "        v=201\n",
    "    elif v==250: #ú\n",
    "        v=218\n",
    "    elif v==241: #ñ\n",
    "        v=209\n",
    "    elif v==252: #ü\n",
    "        v=220\n",
    "    c1 += chr(v)\n",
    "\n",
    "print (c1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Ejercicio 17\n",
    "            \n",
    "import sys\n",
    "l=[]\n",
    "largo=int(input('tamaño de la lista es: '))\n",
    "\n",
    "for i in range(largo):\n",
    "    l.append(input(f'digite el {i+1}: '))\n",
    "print(l)\n",
    "\n",
    "t=0\n",
    "for n in l:\n",
    "    t1=sys.getsizeof(n)\n",
    "    if t1>=t:\n",
    "        t1=t\n",
    "for m in l:\n",
    "    if sys.getsizeof(m)==t1:\n",
    "        l.remove(m)\n",
    "t2=0\n",
    "for j in l:\n",
    "    t1=sys.getsizeof(j)\n",
    "    if t1>t2:\n",
    "        t2=t1\n",
    "for k in l:\n",
    "    if sys.getsizeof(k)==t:\n",
    "        \n",
    "        print(f'el segundo elemento de mayor tamaño es {k}')\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Ejercicio 18\n",
    "\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "x= int(input(\"Ingrese el número de filas: \"))\n",
    "y = int(input(\"Ingrese el número de columnas: \"))\n",
    "           \n",
    "\n",
    "def matriz(x, y): #se crea la matriz y en ella le pide al usuario que digite\\\n",
    "    #cada elemento que la compone\n",
    "    M  = [[0 for c in range(y)] for f in range(x)]\n",
    "    for f in range(len(M)):\n",
    "        for elemento in range(len(M[f])):\n",
    "            while True:\n",
    "                try:\n",
    "                    inp = input(f\"Ingrese el valor de la posición \"\n",
    "                                f\"{chr(65 + elemento)}{f + 1}: \")\n",
    "                    M[f][elemento] = int(inp)\n",
    "                    break\n",
    "                except (ValueError, TypeError):\n",
    "                    print(\"valor no válido.\"\n",
    "                              \"Intente de nuevo.\")\n",
    "                    continue\n",
    "    return M\n",
    "\n",
    "M= np.array(matriz(x, y))\n",
    "\n",
    "print(\"Matriz original: \")\n",
    "print(M)\n",
    "print(\"Matriz triangular superior: \")\n",
    "np.array(M)\n",
    "print(np.triu(M))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Ejercicio 19\n",
    "\n",
    "x=int(input(('digite el tamaño de la lista: ')))\n",
    "l=[]\n",
    "for n in range(x): # se itera para llenar la lista\n",
    "    l.append(input('ingrese los valores de la lista'+str(n+1)+': '))\n",
    "\n",
    "M=[] #aqui se guardara cada sublista\n",
    "\n",
    "t=[] #lista donde cada posicion indica el tamaño de la sublista\n",
    "for n in range(len(l)-1):\n",
    "    M.append([])\n",
    "    M[n].append(l[n]) # se van agregando los elementos analizados a M\n",
    "    for m in range(n+1,len(l)):\n",
    "        if l[m-1]<=l[m]:\n",
    "            M[n].append(l[m])\n",
    "        else:\n",
    "            break\n",
    "    t.append(len(M[n])) #se adjunta el tamaño cada lista\n",
    "cmayor=t.count(max(t))\n",
    "p=t.index(max(t)) #pos de la sublista más larga\n",
    "\n",
    "slista=[]\n",
    "if cmayor==1:\n",
    "    print(f'la sublista ordenada ascendentemente mayor es {M[p]}')\n",
    "else:\n",
    "    a=-1\n",
    "    for j in range(cmayor):\n",
    "        a=t.index(max(t),a+1)\n",
    "        slista.append(M[a])\n",
    "    print(f'las sublistas mas largas son {slista}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Ejercicio 20\n",
    "\n",
    "import numpy as np\n",
    "x=int(input('numero de fila de la matriz: ')) #ingresa tamaño de la matriz\n",
    "y=int(input('numero de colunas de la matriz: '))\n",
    "\n",
    "\n",
    "def matriz(x, y): #se crea la matriz iterando cada posicion\n",
    "    M= [[0 for c in range(y)] for f in range(x)]\n",
    "    for f in range(len(M)):\n",
    "        for elemento in range(len(M[f])):\n",
    "            while True:\n",
    "                try:\n",
    "                    inp = input(f\"Ingrese el valor de la posición \"\n",
    "                                f\"{chr(65 + elemento)}{f + 1}: \")\n",
    "                    M[f][elemento] = int(inp)\n",
    "                    break\n",
    "                except (ValueError, TypeError):\n",
    "                    print(\"Ha ingresado un valor no válido.\"\n",
    "                              \"Intente de nuevo.\")\n",
    "                    continue\n",
    "\n",
    "    return M\n",
    "\n",
    "def rota90(matriz): #se crea una funcion que rote la matriz existente 90°\n",
    "    for i , f in enumerate(M):\n",
    "        M[i] = f[::-1]\n",
    "\n",
    "    rot90 = M.T\n",
    "\n",
    "    return rot90\n",
    "\n",
    "M= np.array(matriz(x, y))\n",
    "\n",
    "print(\"Matriz original: \")\n",
    "print(M)\n",
    "print(\"Matriz rotada 90°:\")\n",
    "print(rota90(M))\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
